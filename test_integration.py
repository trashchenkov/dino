#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DINO.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å Gemini API.
–¢–†–ï–ë–£–ï–¢: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ.
"""

import os
import sys
from PIL import Image
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API."""
    print("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API...")
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç GEMINI_API_KEY")
        return False
    
    if api_key == "your_api_key_here":
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("üí° –ó–∞–º–µ–Ω–∏—Ç–µ 'your_api_key_here' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
    return True


def test_real_image_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API."""
    print("\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        from dino_analyzer import DinosaurAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = DinosaurAnalyzer()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image_path = "sample_dino.jpg"
        if not os.path.exists(test_image_path):
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {test_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...")
        result = analyzer.analyze_image(test_image_path)
        
        if result:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìõ –í–∏–¥: {result.species_name}")
            print(f"üé® –¶–≤–µ—Ç: {result.color_description}")
            print(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {result.geological_period}")
            print(f"üìö –§–∞–∫—Ç: {result.brief_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if all([result.species_name, result.color_description, 
                   result.geological_period, result.brief_info]):
                print("‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return True
            else:
                print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ")
                return False
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è - API –≤–µ—Ä–Ω—É–ª None")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False


def test_pil_image_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        from dino_analyzer import DinosaurAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image = Image.new('RGB', (200, 200), color='darkgreen')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã
        from PIL import ImageDraw
        draw = ImageDraw.Draw(test_image)
        draw.rectangle([50, 50, 150, 100], fill='lightgreen')  # –¢–µ–ª–æ
        draw.rectangle([150, 40, 180, 80], fill='green')       # –ì–æ–ª–æ–≤–∞
        
        analyzer = DinosaurAnalyzer()
        result = analyzer.analyze_image_from_pil(test_image)
        
        if result:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω")
            print(f"üìõ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.species_name}")
            return True
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False


def test_model_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–∏...")
    
    try:
        from models import DinosaurInfo
        
        # –°–æ–∑–¥–∞–µ–º JSON –∫–∞–∫ –º–æ–≥ –±—ã –≤–µ—Ä–Ω—É—Ç—å API
        api_response = '''
        {
            "species_name": "Tyrannosaurus Rex",
            "color_description": "brown and green plastic figure",
            "geological_period": "Late Cretaceous",
            "brief_info": "One of the largest land predators ever known"
        }
        '''
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        dino = DinosaurInfo.model_validate_json(api_response)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —É—Å–ø–µ—à–Ω–∞")
        print(f"üìõ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç: {dino.species_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
        json_output = dino.model_dump_json(indent=2)
        print("‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON —É—Å–ø–µ—à–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False


def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫."""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    try:
        from dino_analyzer import DinosaurAnalyzer
        
        analyzer = DinosaurAnalyzer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        result = analyzer.analyze_image("nonexistent_file.jpg")
        if result is None:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª")
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        with open("test_invalid.txt", "w") as f:
            f.write("This is not an image")
        
        result = analyzer.analyze_image("test_invalid.txt")
        if result is None:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª")
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove("test_invalid.txt")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("ü¶ï DINO Project - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 50)
    print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
    print("=" * 50)
    
    all_tests_passed = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = [
        test_api_connection,
        test_model_validation,
        test_error_handling,
        test_real_image_analysis,
        test_pil_image_analysis
    ]
    
    for test_func in tests:
        if not test_func():
            all_tests_passed = False
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    # –ò—Ç–æ–≥
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç DINO –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("\nüöÄ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
        print("   ‚Ä¢ streamlit run streamlit_app.py (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)")
        print("   ‚Ä¢ python dino_analyzer.py (–∫–æ–Ω—Å–æ–ª—å)")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   ‚Ä¢ Unit —Ç–µ—Å—Ç—ã: python test_dino.py")
    print("   ‚Ä¢ Integration —Ç–µ—Å—Ç—ã: python test_integration.py")


if __name__ == "__main__":
    main() 