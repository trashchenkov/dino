import os
import json
from typing import Optional
from PIL import Image
import google.generativeai as genai

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å dotenv, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # –ù–∞ HF Spaces dotenv –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    pass

from models import DinosaurInfo
from utils import optimize_image_for_api, save_temp_image, cleanup_temp_file, validate_image_file

class DinosaurAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é Gemini API."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è Gemini. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        if api_key is None:
            api_key = os.getenv('GEMINI_API_KEY')
            
        if not api_key:
            raise ValueError(
                "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ api_key –∏–ª–∏ "
                "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY"
            )
            
        genai.configure(api_key=api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        self.model = genai.GenerativeModel(
            model_name='gemini-1.5-flash-latest',
            generation_config={
                "response_mime_type": "application/json",
                "response_schema": DinosaurInfo
            },
            system_instruction="""
            –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ! –í–µ—Å—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            
            –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–ø–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥ –∏ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä–æ–∫ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤. 
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–≥—Ä—É—à–µ—á–Ω–æ–π —Ñ–∏–≥—É—Ä–∫–∏.
            
            –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ê–ù–ê–õ–ò–ó–£:
            1. üîç –û–ü–†–ï–î–ï–õ–ò –í–ò–î: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ —Ñ–æ—Ä–º—É —Ç–µ–ª–∞, –≥–æ–ª–æ–≤—É, –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, —Ö–≤–æ—Å—Ç, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–¥–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –ù–∞–∑–æ–≤–∏ –≤–∏–¥ –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ.
            
            2. üé® –û–ü–ò–®–ò –¶–í–ï–¢–ê: –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π —Ñ–∏–≥—É—Ä–∫–∏ (–∫–∞–∫ –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –Ω–∞ —Ñ–æ—Ç–æ). –ù–ï –æ–ø–∏—Å—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –∞ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –∏–≥—Ä—É—à–∫–µ.
            
            3. ‚è∞ –£–ö–ê–ñ–ò –ü–ï–†–ò–û–î: –û–ø—Ä–µ–¥–µ–ª–∏ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–∏–ª —ç—Ç–æ—Ç –≤–∏–¥ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Æ—Ä—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥", "–ü–æ–∑–¥–Ω–∏–π –º–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥").
            
            4. üìö –†–ê–°–°–ö–ê–ñ–ò –§–ê–ö–¢: –ü–æ–¥–µ–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º –æ–± —ç—Ç–æ–º –≤–∏–¥–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –§–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ.
            
            –í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
            - –í–°–ï –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è–π —Ç–æ–ª—å–∫–æ –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ
            - –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥, –Ω–∞–ø–∏—à–∏ "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤–∏–¥" –∏–ª–∏ –æ–ø–∏—à–∏ –∫–∞–∫ "–î–∏–Ω–æ–∑–∞–≤—Ä —Å–µ–º–µ–π—Å—Ç–≤–∞..."
            - –î–ª—è —Ü–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–∑–µ–ª–µ–Ω—ã–π, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π, –∂–µ–ª—Ç—ã–π –∏ —Ç.–¥.)
            - –ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞–∑—ã–≤–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏
            - –§–∞–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏
            
            –í–µ—Ä–Ω–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π JSON-—Å—Ö–µ–º–µ –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï.
            """
        )
    
    def analyze_image(self, image_path: str) -> Optional[DinosaurInfo]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
        Args:
            image_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            DinosaurInfo –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏–Ω–æ–∑–∞–≤—Ä–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
            if not os.path.exists(image_path):
                print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
                
            if not validate_image_file(image_path):
                print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {image_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(image_path)
            optimized_img = optimize_image_for_api(img)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
            response = self.model.generate_content([optimized_img])
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –≤ –æ–±—ä–µ–∫—Ç DinosaurInfo
            dino_data = DinosaurInfo.model_validate_json(response.text)
            return dino_data
            
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response.text}")
            return None
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            if 'response' in locals() and hasattr(response, 'prompt_feedback'):
                print(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {response.prompt_feedback}")
            return None
    
    def analyze_image_from_pil(self, image: Image.Image) -> Optional[DinosaurInfo]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞.
        
        Args:
            image: PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
        Returns:
            DinosaurInfo –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏–Ω–æ–∑–∞–≤—Ä–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        temp_path = None
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_path = save_temp_image(image)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            optimized_img = optimize_image_for_api(image)
            response = self.model.generate_content([optimized_img])
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –≤ –æ–±—ä–µ–∫—Ç DinosaurInfo
            dino_data = DinosaurInfo.model_validate_json(response.text)
            return dino_data
            
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            if 'response' in locals():
                print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response.text}")
            return None
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            if 'response' in locals() and hasattr(response, 'prompt_feedback'):
                print(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {response.prompt_feedback}")
            return None
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_path:
                cleanup_temp_file(temp_path)
    
    def print_dinosaur_info(self, info: DinosaurInfo) -> None:
        """
        –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–Ω–æ–∑–∞–≤—Ä–µ.
        
        Args:
            info: –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏–Ω–æ–∑–∞–≤—Ä–µ
        """
        separator = "=" * 50
        print(f"\n{separator}")
        print("ü¶ï –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–ù–û–ó–ê–í–†–ï ü¶ï")
        print(f"{separator}")
        print(f"üìõ –í–∏–¥: {info.species_name}")
        print(f"üé® –¶–≤–µ—Ç —Ñ–∏–≥—É—Ä–∫–∏: {info.color_description}")
        print(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {info.geological_period}")
        print(f"üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {info.brief_info}")
        print(f"{separator}\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    try:
        analyzer = DinosaurAnalyzer()
        
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–∏–Ω–æ–∑–∞–≤—Ä–∞
        image_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–∏–Ω–æ–∑–∞–≤—Ä–∞: ").strip()
        
        if not image_path:
            print("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ —É–∫–∞–∑–∞–Ω")
            return
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        info = analyzer.analyze_image(image_path)
        
        if info:
            analyzer.print_dinosaur_info(info)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å API –∫–ª—é—á –¥–ª—è Gemini")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 