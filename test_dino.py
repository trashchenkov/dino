#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DINO.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API.
"""

import os
import sys
from PIL import Image
import tempfile


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        from models import DinosaurInfo
        print("‚úÖ models.py - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå models.py - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    try:
        import utils
        print("‚úÖ utils.py - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå utils.py - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    try:
        from dino_analyzer import DinosaurAnalyzer
        print("‚úÖ dino_analyzer.py - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå dino_analyzer.py - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    return True


def test_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É Pydantic –º–æ–¥–µ–ª–µ–π."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏...")
    
    try:
        from models import DinosaurInfo
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "species_name": "–¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä –†–µ–∫—Å",
            "color_description": "–∑–µ–ª–µ–Ω—ã–π —Å –∫–æ—Ä–∏—á–Ω–µ–≤—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏",
            "geological_period": "–ü–æ–∑–¥–Ω–∏–π –º–µ–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥",
            "brief_info": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π –Ω–∞–∑–µ–º–Ω—ã–π —Ö–∏—â–Ω–∏–∫"
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        dino = DinosaurInfo(**test_data)
        print("‚úÖ DinosaurInfo - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        json_data = dino.model_dump_json()
        print("‚úÖ DinosaurInfo - JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        restored = DinosaurInfo.model_validate_json(json_data)
        print("‚úÖ DinosaurInfo - –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON —É—Å–ø–µ—à–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


def test_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    print("\nüõ†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã...")
    
    try:
        from utils import (
            validate_image_file, 
            optimize_image_for_api, 
            format_file_size,
            save_temp_image,
            cleanup_temp_file
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image = Image.new('RGB', (100, 100), color='red')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        optimized = optimize_image_for_api(test_image)
        print("‚úÖ optimize_image_for_api - —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        size_str = format_file_size(1024)
        assert "KB" in size_str
        print("‚úÖ format_file_size - —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_path = save_temp_image(test_image)
        assert os.path.exists(temp_path)
        print("‚úÖ save_temp_image - —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        success = cleanup_temp_file(temp_path)
        assert success
        assert not os.path.exists(temp_path)
        print("‚úÖ cleanup_temp_file - —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ç–∏–ª–∏—Ç: {e}")
        return False


def test_analyzer_init():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ API –∫–ª—é—á–∞."""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
    
    try:
        from dino_analyzer import DinosaurAnalyzer
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–¥–æ–ª–∂–Ω–æ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)
        try:
            analyzer = DinosaurAnalyzer()
            print("‚ùå DinosaurAnalyzer - –Ω–µ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É –±–µ–∑ API –∫–ª—é—á–∞")
            return False
        except ValueError:
            print("‚úÖ DinosaurAnalyzer - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–µ–π–∫–æ–≤—ã–º API –∫–ª—é—á–æ–º
        try:
            analyzer = DinosaurAnalyzer(api_key="fake_key_for_testing")
            print("‚úÖ DinosaurAnalyzer - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å API –∫–ª—é—á–æ–º —É—Å–ø–µ—à–Ω–∞")
        except Exception as e:
            print(f"‚ùå DinosaurAnalyzer - –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False


def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "models.py",
        "dino_analyzer.py", 
        "streamlit_app.py",
        "utils.py",
        "requirements.txt",
        "README.md",
        "dino.md"
    ]
    
    missing_files = []
    for file_name in required_files:
        if os.path.exists(file_name):
            print(f"‚úÖ {file_name} - –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file_name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing_files.append(file_name)
    
    return len(missing_files) == 0


def create_sample_image():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\nüñºÔ∏è –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (300, 200), color='green')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é "—Ñ–∏–≥—É—Ä–∫—É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞" (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        from PIL import ImageDraw
        draw = ImageDraw.Draw(img)
        
        # –¢–µ–ª–æ
        draw.rectangle([50, 100, 150, 160], fill='darkgreen')
        # –ì–æ–ª–æ–≤–∞
        draw.rectangle([150, 80, 200, 120], fill='darkgreen')
        # –•–≤–æ—Å—Ç
        draw.rectangle([20, 110, 50, 130], fill='darkgreen')
        # –ù–æ–≥–∏
        draw.rectangle([70, 160, 80, 180], fill='darkgreen')
        draw.rectangle([120, 160, 130, 180], fill='darkgreen')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        sample_path = "sample_dino.jpg"
        img.save(sample_path, "JPEG")
        print(f"‚úÖ –û–±—Ä–∞–∑–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {sample_path}")
        
        return sample_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("ü¶ï DINO Project - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 40)
    
    all_tests_passed = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_file_structure,
        test_imports,
        test_models,
        test_utils,
        test_analyzer_init
    ]
    
    for test_func in tests:
        if not test_func():
            all_tests_passed = False
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    sample_path = create_sample_image()
    
    # –ò—Ç–æ–≥
    print("\n" + "=" * 40)
    if all_tests_passed:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("   streamlit run streamlit_app.py")
        if sample_path:
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {sample_path} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    
    print("\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
    print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("   2. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á: https://ai.google.dev/")
    print("   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY")


if __name__ == "__main__":
    main() 